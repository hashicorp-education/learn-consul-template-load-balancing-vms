#!/usr/bin/env bash

# ++-----------
# ||   00 - Local Variables
# ++------

# Add here all the variables/functions required from the scenario that 
# should not be set globally.

# ++-----------------+
# || Variables       |
# ++-----------------+

## Filename where to store 
LOG_FILES_CREATED_NAME="scenario_files.log"
LOG_PROVISION_NAME="scenario_provision.log"
LOG_PROVISION_MD_NAME="scenario_provision.md"

# ## Overwrites log level
# log_warn "Setting log level manually LOCAL"
# LOG_LEVEL=2

## Sets Consul log level for nodes in the scenario.
## 
export CONSUL_LOG_LEVEL="DEBUG"

## Sets Consul log level for nodes in the scenario.
## The available log levels are:
## * trace
## * debug
## * info
## * warning/warn
## * error
## * critical
## * off

export ENVOY_LOG_LEVEL="info"

# ++-----------------+
# || Functions       |
# ++-----------------+

## Prints available environment variables for specific configurations.
## This can be useful as an output function at the end of a scenario step
## to provide instructions or variables to interact with the scenario.

## [ ] todo define available outputs
## [x] todo make result consistent
## [x] todo make function parametric
print_env() {

  # Get options from parameters
  set -- $(getopt d:t:f "$@")
  while [ $# -gt 0 ]
  do
    case "$1" in
    (-s) _force_static=true; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done


  if [ ! -z $1 ] ; then

    ## If a parameter is passed the function checks if an avalable env is present.
    ## Some environments are printed from memory (like `consul` or `vault`) 
    ## because they represent CLI configurations that can be useful for 
    ## interactive scenarios.
    if [ ! "${_force_static}" == "true" ]; then

        if [ "$1" == "consul" ]; then
          ## Consul CLI configuration variables
          echo " export CONSUL_HTTP_ADDR=${CONSUL_HTTP_ADDR}"
          echo " export CONSUL_HTTP_TOKEN=${CONSUL_HTTP_TOKEN}"
          echo " export CONSUL_HTTP_SSL=${CONSUL_HTTP_SSL}"
          echo " export CONSUL_CACERT=${CONSUL_CACERT}"
          echo " export CONSUL_TLS_SERVER_NAME=${CONSUL_TLS_SERVER_NAME}"
          # echo " export CONSUL_FQDN_ADDR=${CONSUL_FQDN_ADDR}"
          return 0 

        elif [ "$1" == "scenario" ]; then
          ## Script configuration variables
          echo " export CONSUL_DATACENTER=${CONSUL_DATACENTER}"
          echo " export CONSUL_DOMAIN=${CONSUL_DOMAIN}"
          echo " export CONSUL_SERVER_NUMBER=${CONSUL_SERVER_NUMBER}"
          echo " export CONSUL_RETRY_JOIN=${CONSUL_RETRY_JOIN}"
          echo " export CONSUL_CONFIG_DIR=${CONSUL_CONFIG_DIR}"
          echo " export CONSUL_DATA_DIR=${CONSUL_DATA_DIR}"
          return 0

        elif [ "$1" == "vault" ]; then
          ## Vault CLI configuration variables
          echo " export VAULT_ADDR=${VAULT_ADDR}"
          echo " export VAULT_TOKEN=${VAULT_TOKEN}"
          return 0
        fi

        ## [plug] ADD OTHER DYNAMIC OPTIONS FOR ENVIRONMENTS ABOVE
        
    fi


    ## If the parameter does not match one of the DYNAMIC options configured above
    ## checks if a file with the name pattern env-$parameter.env exists and if 
    ## it does, cats it on standard output.
    ## This is useful in case you have some STATIC scenario files you want to
    if [[ -f "${ASSETS}/scenario/env-$1.env" ]] && [[ -s "${ASSETS}/scenario/env-$1.env" ]] ;  then

      ## if found cats the file to standard output for logging.
      cat ${ASSETS}/scenario/env-$1.env

    fi
  # else
  #   # If no argument is passed prints all available environment files
  #   for env_file in `find ${ASSETS} -name env-*`; do
      
  #     echo -e "\033[1m\033[31mENV: ${env_file}\033[0m"
  #     cat ${env_file}
  #     echo ""
  #   done
  fi

}

