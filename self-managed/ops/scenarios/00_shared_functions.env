#!/usr/bin/env bash

# ++-----------
# ||   00 - Global Functions
# ++------

## Variables and functions in this file are needed both for local and remote 
## execution.They will be used by the `ops/provision.sh` scipt but also added to 
## the runbook files prepared for remote execution.

# ++-----------------+
# || Variables       |
# ++-----------------+

## [core] [conf] Log Levels
## 0 - TRACE & Commands
## 1 - DEBUG
## 2 - INFO
## 3 - WARN
## 4 - ERR
LOG_LEVEL=${LOG_LEVEL:-2}

# # ## Overwrites log level
# LOG_LEVEL=0

## Timestamp
TSTAMP_MARKER="/tmp/tstamp.$$"
touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

## Header Counters
## Resets header counter at the start of execution.
H1=0
H2=0
H3=0

# ++-----------------+
# || Functions       |
# ++-----------------+

# ++---------------------------------------------------------------------------+
# || Logging                                                                   |
# ++---------------------------------------------------------------------------+

## Prints a line on stdout prepended with date and time
## Usage log [-l loglevel] [-t tag] [-f] log_message
log() {
  
  ## Define Colors
  local Col_Off="\033[0m"       # Text Reset
	local BBlack="\033[1;30m"       # Black
	local BRed="\033[1;31m"         # Red
	local BGreen="\033[1;32m"       # Green
	local BYellow="\033[1;33m"      # Yellow
	local BBlue="\033[1;34m"        # Blue
	local BPurple="\033[1;35m"      # Purple
	local BCyan="\033[1;36m"        # Cyan
	local BWhite="\033[1;37m"       # White

  # Define internal defaults
  local _log_level="2"
  local _log_tag=""
  local _force_log=""

  # Get options from parameters
  # set -- $(getopt l:t:f "$@")
  while [ $# -gt 0 ]
  do
    case "$1" in
    (-l) _log_level=$2; shift; shift;;
    (-t) _log_tag=$2; shift; shift;;
    (-f) _force_log=true; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done

  local _message="${@}"

  # Check if LOG_LEVEL is compatible with the logging or if log must be forced
  case "${_log_level}" in
    (0|TRACE|COMM) if [ "${LOG_LEVEL}" -gt 0 ] && [ ! "${_force_log}" == "true" ]; then return; fi ;;
    (1|DEBUG)      if [ "${LOG_LEVEL}" -gt 1 ] && [ ! "${_force_log}" == "true" ]; then return; fi ;;
    (2|INFO)       if [ "${LOG_LEVEL}" -gt 2 ] && [ ! "${_force_log}" == "true" ]; then return; fi ;;
    (3|WARN)       if [ "${LOG_LEVEL}" -gt 3 ] && [ ! "${_force_log}" == "true" ]; then return; fi ;;
    (4|ERR)        if [ "${LOG_LEVEL}" -gt 4 ] && [ ! "${_force_log}" == "true" ]; then return; fi ;;
    (*)            _log_level=2;               if [ ! "${_force_log}" == "true" ]; then return; fi;;
  esac

  # Define log Colors
  _tag_color=""
  case "${_log_level}" in
    (0|TRACE|COMM) _log_tag=${_log_tag:-"[TRACE]"}; _tag_color=${BPurple};   ;; #shift;;
    (1|DEBUG)      _log_tag=${_log_tag:-"[DEBUG]"}; _tag_color=${BCyan}; ;; #shift;;
    (2|INFO)       _log_tag=${_log_tag:-"[INFO]"};  _tag_color=${BWhite}; ;; #shift;;
    (3|WARN)       _log_tag=${_log_tag:-"[WARN]"};  _tag_color=${BYellow}; ;; #shift;;
    (4|ERR)        _log_tag=${_log_tag:-"[ERR]"};   _tag_color=${BRed};    ;; #shift;;
    (*)            echo "$0: error - unrecognized option $1" 1>&2; exit 1;; 
  esac

  # Log to STDOUT
  echo -e "${BWhite}["$(date +"%Y-%m-%d %H:%M:%S")"] - ${_tag_color}${_log_tag}${BWhite} ${_message} ${Col_Off}"
}

log_err   () { log -l "ERR" "${@}"; }
log_warn  () { log -l "WARN" "${@}"; }
log_info  () { log -l "INFO" "${@}"; }
log_debug () { log -l "DEBUG" "${@}"; }
log_trace () { log -l "TRACE" "${@}"; }

log_ok() {
  DEC_OK="\033[1m\033[32m[ OK ] \033[0m\033[1m"
  log "${DEC_OK}${@}"  
}

## Prints a header on stdout
header() {
  COL="\033[1m\033[32m"

  echo -e ""
  echo -e "${COL}++----------- " 
  echo -e "${COL}||   ${@} "
  echo -e "${COL}++------      " 

  echo -e "\033[0m"
}

header0() {
  H1=0
  H2=0
  H3=0
  header "$H1 - $@"
}

header1() {
  H1=$((H1+1))
  H2=0
  H3=0
  header "$H1 - $@"

  # log_provision "# $H1 - ${@}"
}

header2() {
  H2=$((H2+1))
  H3=0

  COL="\033[1m\033[32m"

  echo -e "${COL}"
  echo -e "${COL} ##   $H1.$H2 - ${@} "
  echo -e "\033[0m"

  # log_provision "## $H1.$H2 - ${@}"
}


header3() {

  H3=$((H3+1))

  COL="\033[1m\033[32m"

  echo -e "${COL}"
  echo -e "${COL} ###   $H1.$H2.$H3 - ${@} "
  echo -e "\033[0m"

  # log_provision "### $H1.$H2.$H3 - ${@}"

}

# ## [feat] [log] Make script log on files
# ## todo add this at the end of every log function
# log_provision() {

#   ## [debug] make sure logging to files is fully implemented
#   return 0

#   if [ ! -z "${LOG_PROVISION}" ]; then
#     touch ${LOG_PROVISION}
#     echo -e "${@}" >> ${LOG_PROVISION}
#   fi

# }

## Run this function at the end of every module to get a log of generated files
## [ ] check if it works
get_created_files() {

  log_trace "Generate files list in $LOG_FILES_CREATED"

  echo "-----------------------------------------------"   >> ${LOG_FILES_CREATED}
  echo " Files created by module $H1: $OPERATE_STEP    "   >> ${LOG_FILES_CREATED}
  echo "-----------------------------------------------"   >> ${LOG_FILES_CREATED}
  echo ""                                                  >> ${LOG_FILES_CREATED}

  find ${ASSETS} -type f -newer ${TSTAMP_MARKER} | sort >> ${LOG_FILES_CREATED}

  echo ""                                                  >> ${LOG_FILES_CREATED}

  if [[ ! -z "$1" ]] && [[ "$1" == "--verbose" ]] ; then

    echo -e "\033[1m\033[31mFILES CREATED IN THIS MODULE:\033[0m"
    find ${ASSETS} -type f -newer ${TSTAMP_MARKER} | sort
    echo ""

  fi

  touch -t `date '+%Y%m%d%H%M.%S'` ${TSTAMP_MARKER}

  sleep 1
}

# ++---------------------------------------------------------------------------+
# || OS Management && Flow Control                                             |
# ++---------------------------------------------------------------------------+

## Check if the binary exists otherwise exits
prerequisite_check() {
  if [ ! -z "$1" ] ; then
    if [[ `which $1` ]] ; then
      log "[ $1 ] - found"
      return
    fi
  fi
  log_err "[ $1 ] - Not found"
  exit 1
}

## Check if OS is Linux based or not
is_linux() {

  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    echo true
  else
    echo false
  fi

}

# Waits for a node with hostname passed as an argument to be resolvable
wait_for() {

  _HOSTNAME=$1

  _NODE_IP=`dig +short $1`

  while [ -z ${_NODE_IP} ]; do

    log_warn "$1 not running yet"

    sleep 1

    _NODE_IP=`dig +short $1`
  
  done

}

# Executes a command on a remote host
# Usage 
# remote_exec hashicups-db "bash -c /start_database.sh"
remote_exec() {
  
  local _old_ssh=false
  local _silent=false
  # local _run_as_demon=false
  # local _demon_log_file=""

  ## Check parameters
  while [ $# -gt 0 ]
  do
    case "$1" in
    (-o) _old_ssh=true; shift;;
    (-s) _silent=true; shift;;
    # (-d) _run_as_demon=true; _demon_log_file=$1; shift; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done

  local REMOTE_HOST="$1"

  IFS=': ' read -r -a SSH_INFO <<< "${REMOTE_HOST}"
  local REMOTE_HOST_IP=${SSH_INFO[0]}
  local REMOTE_HOST_PORT=${SSH_INFO[1]}


  if [ ! -z "${REMOTE_HOST_PORT}" ]; then
    local SSH_PORT="-p ${REMOTE_HOST_PORT}"
  fi

  local COMMAND="$2"
  
  if [ ! "${_old_ssh}" == true ]; then

    ## Running function new version

    # if [ ! "${_run_as_demon}" == true ]; then

      ## Run a command and wait for the completion
      local _OUTPUT=""
      _OUTPUT=$(eval ssh ${SSH_OPTS} -i ${SSH_CERT} ${USER}@${REMOTE_HOST_IP}${FQDN_SUFFIX} ${SSH_PORT} "'${COMMAND}'")

      local _STAT="$?"

      ## If we did not set the -s option, prints the output.
      if [ ! "${_silent}" == true ]; then
        echo -e "${_OUTPUT}"
      fi

      if [ "${_STAT}" -ne 0 ];  then
        # log_warn "Conmmand failed."
        return 1
      else
        # log_ok "Conmmand succeeded."
        return 0
      fi
    # else
    #   # Run a long running command that needs to output on a file

    #   $(eval ssh ${SSH_OPTS} -i ${SSH_CERT} ${USER}@${REMOTE_HOST_IP}${FQDN_SUFFIX} ${SSH_PORT} "nohup '${COMMAND}' > ${_demon_log_file} ")

    # fi
  else 

    ssh \
      ${SSH_OPTS} \
      -i ${SSH_CERT} \
      ${USER}@${REMOTE_HOST_IP}${FQDN_SUFFIX} ${SSH_PORT} \
      "${COMMAND}"
  
  fi
}

# Copies a file on a remote node
# Usage:
# remote_copy hashicups-db agent-gossip-encryption.hcl /etc/consul/config
remote_copy() {
  # scp -o ${SSH_OPTS} agent-gossip-encryption.hcl                 consul${FQDN_SUFFIX}:/etc/consul/config > /dev/null 2>&1

  ## First argument is the remote host where to copy the file.
  ## Supports ports different from 22 by passing the argument in the form
  ## `hostname:port`
  local REMOTE_HOST="$1"

  ## If a custom port is specified, configures the command to use the custom port.
  IFS=': ' read -r -a SSH_INFO <<< "${REMOTE_HOST}"
  local REMOTE_HOST_IP=${SSH_INFO[0]}
  local REMOTE_HOST_PORT=${SSH_INFO[1]}

  if [ ! -z "${REMOTE_HOST_PORT}" ]; then
    local SSH_PORT="-P ${REMOTE_HOST_PORT}"
  fi

  ## Second argument is the source file to copy
  local SOURCE="$2"

  ## Third argument is the destionation where to copy the file on the remote host.
  local DESTINATION="$3"

  ## Run the `scp` command to copy the file on the remote node.

  local _COMMAND="scp -r ${SCP_OPTS} -i ${SSH_CERT} ${SSH_PORT} ${SOURCE} ${USER}@${REMOTE_HOST_IP}${FQDN_SUFFIX}:${DESTINATION} > /dev/null 2>&1"
  
  #   if scp -r ${SCP_OPTS} -i ${SSH_CERT} ${SSH_PORT} ${SOURCE} ${USER}@${REMOTE_HOST_IP}${FQDN_SUFFIX}:${DESTINATION} > /dev/null 2>&1; then

  if eval ${_COMMAND}; then
    log_trace "Copied ${SOURCE} to ${USER}@${REMOTE_HOST}${FQDN_SUFFIX}:${DESTINATION}"
  else
    log_err "[ @${FUNCNAME[0]} ] Copy of ${SOURCE} to ${REMOTE_HOST} failed."
    log_err "[ @${FUNCNAME[0]} ] Check if Host:[${REMOTE_HOST}] is running, or if ${SOURCE} exists."
    exit 255
  fi
}

## Locates a supporting script in the supporting script library and runs it
execute_supporting_script() {

  _support_scripts_name="$1" #"generate_consul_server_tokens.sh"

  ## This is:
  ## ops/scenarios when running remotely 
  ## scenarios/ when running locally (on bastion host)
  ## [warn] Possible breaking point
  ## [warn] This will not work in instruqt, scripts are not there.
  ## [ ] find a more elegant way to check this  
  if [ -d "ops/scenarios/00_base_scenario_files/supporting_scripts/" ]; then
    log_debug "Found supporting scripts in ops/scenarios/00_base_scenario_files"
    _support_scripts_path="ops/scenarios/00_base_scenario_files/supporting_scripts/"
  elif [ -d "scenarios/00_base_scenario_files/supporting_scripts/" ]; then
    log_debug "Found supporting scripts in scenarios/00_base_scenario_files"
    _support_scripts_path="scenarios/00_base_scenario_files/supporting_scripts/"
  else
    log_err "[ ${OPERATE_STEP} ] Supporting scripts folder NOT FOUND...exiting"
    exit 1
  fi

  _support_script_source="${_support_scripts_path}${_support_scripts_name}"

  if [ -f "${_support_script_source}" ]; then
    
    ## Copy script to scenario folder to keep track of usage
    log_trace -t "[COMM]" cp "${_support_script_source}" "${SCENARIO_OUTPUT_FOLDER}scripts/${_support_scripts_name}"

    cp "${_support_script_source}" "${SCENARIO_OUTPUT_FOLDER}scripts/${_support_scripts_name}"

  #   log "Running support script"
    chmod +x "${SCENARIO_OUTPUT_FOLDER}scripts/${_support_scripts_name}"
    ${SCENARIO_OUTPUT_FOLDER}scripts/${_support_scripts_name}

    STAT=$?

    ## Checking exit status
    if [ ${STAT} -ne 0 ];  then
      log_err "Error creating configuration. Exiting."
      exit 1;
    fi

  else
    log_err "[ ${OPERATE_STEP} ] ${_support_scripts_name} - NOT FOUND...exiting"
    exit 1
  fi
}


