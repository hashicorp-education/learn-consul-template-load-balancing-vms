#!/usr/bin/env bash

# ++-----------
# ||   10 - Scenario related functions and variables
# ++------

# ++-----------------+
# || Variables       |
# ++-----------------+

## Current Implementation

## DATA FORMAT:
##    * Each scenario folder is named with the following schema: '[\d\d]_.*.env'
##    * * Each scenario folder contains files named with the following schema: 
##       '[\d\d]_.*.(env|sh)'. Those files represent the scenario.
##    * * Each scenario folder might contain other files with specific 
##        instructions for infrastructure provisioning and cleaning the idea is  
##        to have files like 'spin_infrastructure.sh' or 'test_scenario.sh' and 
##        'solve_scenario.sh' to allow automated testing.

## SCENARIO DEFINITION
## A scenario is a set of bash scripts and environment variable files that are 
## intended to be executed sequentially on a Linux VM to apply a configuration
## on a pre-existing environment. A scenario is intended to be a tool to quickly
## deploy a specific configuration on a specific infrastructure.


# ++-----------------+
# || Functions       |
# ++-----------------+

## [info] finalize flow
## Operates a scenario in the folder.
## Having the function here permits to create portable self-contained scenario
##      folders. This gives the opportunity to create different operate 
##      functions to adapt to every different platform.

## LOGIC:
## Gets `scenario_name_prefix` and looks for a scenario folder with a matching 
## name. If one is found, get a list of the files with `env` and `sh` extension 
## sorted by name and concatenates their content in a file named `operate.sh`.
## The script is then, either copied on a remote Bastion Host and executed 
## remotely, or executed locally.
##
##  Options:
##      local       Runs scenario on local node. 
##                  To be used on Bastion Host only.
##
##      remote      Runs scenario on remote node. 
##                  Relies on ${REMOTE_OPS} ==true && ${BASTION_HOST} != ""
##
##  Relies On:      00_shared_functions.env

## Internal function. Takes a string as an argument and returns the path of a 
## scenario folder with a name that matches the string. It should return an 
## empty string if no matching scenario folder is found.
_locate_scenario() {
  if [ ! -z $1 ]; then
    ## [ ] [input] Implement stricter input control
    ## [ ] [flow]  Use folder from environment 
    ## For now if more than one scenario is found, takes first alfabetical
    # SCENARIO_FOLDER=`find ./scenarios/tutorials/ -maxdepth 1 -wholename "*$1*" -type d | sort | head -1`
    SCENARIO_FOLDER=`find ./scenarios/tutorials/ -wholename "*$1*" -type d | sort | head -1`
  fi   
  echo ${SCENARIO_FOLDER}
}

## Internal function. Takes a string as an argument and returns true if it is an 
## existing folder
_check_scenario() {
  if [ ! -z $1 ]; then
    ##  todo Implement stricter input control
    SCENARIO_FOLDER=$1

    if [ ! -d "${SCENARIO_FOLDER}" ]; then
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      return 1
    fi

  else
    log_err "Scenario not found. @${FUNCNAME[0]}"
    _print_available_scenarios
    return 1
  fi

  return 0
}

## Internal function. Prints all available scenario.
_print_available_scenarios() {
  log_warn "List of available scenarios:`find ./scenarios/ -maxdepth 1 -type d | sed 's/.*\//\t/g' | sort `"
}

## [core] Generates `operate.sh` script.  
## Only creates script without executing it or copying it to the Bastion Host.
operate_dry() { 

  ## Name for the file that will contain the runbook for this phase
  RUNBOOK_FILE="operate.sh"

  log "Generate scenario provision file (${RUNBOOK_FILE}))"

  log_debug "Check scenario existence..."
  if [ ! -z $1 ]; then
    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log_debug "Found scenario at ${SCENARIO_FOLDER}"

      mkdir -p ${SCENARIO_OUTPUT_FOLDER}scripts

      ## Scenario is going to be composed using the following contents:
      ##  - ${SCENARIO_OUTPUT_FOLDER}scenario_env.env            [Environment Variables]
      ##  - ./scenarios/00_shared_functions.env                  [Shared Functions]
      ##  - ./scenarios/00_base_scenario_files/base_consul_dc/*  [Base Consul config]
      ##  - ${SCENARIO_FOLDER}/*                                 [Scenario specific config]
      ##
      ## The whole content will be concatenated into a single script, named operate.sh, 
      ## that is intended to be copied and executed from the Bastion Host.

      ## Copy variables and functions
      ##  [ ] [CHECK] Check PATHS for existence
      ## If scenario file does not exist the final script might not work.

      # | Environment Variables
      # +-----------------------------------------------------------------------
      cat ${SCENARIO_OUTPUT_FOLDER}scenario_env.env > ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      # | Shared functions
      # +-----------------------------------------------------------------------
      echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      cat ./scenarios/00_shared_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      # | Base Scenario
      # +-----------------------------------------------------------------------
      BASE_SCENARIO_FOLDER="./scenarios/00_base_scenario_files/base_consul_dc"
      
      for i in `find ${BASE_SCENARIO_FOLDER}/* -name "[0-9]*" | sort` ; do
        echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat $i >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      done
      
      ## Create environment variable file for the scenario
      echo -e "\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo 'print_env scenario > ${SCENARIO_OUTPUT_FOLDER}env-scenario.env' >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      # | Prerequisites Check
      # +-----------------------------------------------------------------------
      ## If a `check_prerequisites.sh` file exists in the folder, adds it at the 
      ## end of the base scenario script to test if prerequisites were correctly deployed
      CHECK_PREREQS_FILE="${BASE_SCENARIO_FOLDER}/check_prerequisites.sh"
      
      if [[ -f "${CHECK_PREREQS_FILE}" ]] && [[ -s "${CHECK_PREREQS_FILE}" ]] ;  then
        echo -e "\nOPERATE_STEP=`basename ${CHECK_PREREQS_FILE}`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat ${CHECK_PREREQS_FILE} >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      fi
      
      # | Specific Scenario
      # +-----------------------------------------------------------------------
      ## [feat]  [core_ref] Currently selecting the scenario files only by names starting with a number 
      for i in `find ${SCENARIO_FOLDER}/* -name "[0-9]*" | sort` ; do
        echo -e "\nOPERATE_STEP=`basename $i`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
        cat $i >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      done

      echo -e "\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo 'log_debug Export scenario tuning variables on file: ${SCENARIO_OUTPUT_FOLDER}env-$1.env' >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
      echo 'print_env scenario > ${SCENARIO_OUTPUT_FOLDER}env-scenario.env' >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

      # | Solve Specific Scenario
      # +-----------------------------------------------------------------------
      ## If `solve_scenario = true` looks for the following files in the scenario folder:
      ## - `solve_scenario.sh` - containing the runbook for solving the scenario
      ## - `validate_scenario.sh` - containing the runbook to validate the solution
      ## If the files exist, adds them to the provision runbook.
      ## This can be used to test scenario runbooks automativcally
      if [ "${SOLVE_SCENARIO}" == true ]; then

        # Both files need to exist and not to be empty in order for the tool to 
        # add them to the provision runbook file.
        SOLVE_RUNBOOK_FILE="${SCENARIO_FOLDER}/solve_scenario.sh"
        VALIDATE_RUNBOOK_FILE="${SCENARIO_FOLDER}/validate_scenario.sh"
        
        if [[ -f "${SOLVE_RUNBOOK_FILE}" ]] && [[ -s "${SOLVE_RUNBOOK_FILE}" ]] ;  then
          
          log_trace "Found ${SOLVE_RUNBOOK_FILE}"

          if [[ -f "${VALIDATE_RUNBOOK_FILE}" ]] && [[ -s "${VALIDATE_RUNBOOK_FILE}" ]] ;  then

          log_trace "Found ${VALIDATE_RUNBOOK_FILE}"

          cat ./scenarios/01_md_log_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          echo -e "\nOPERATE_STEP=`basename ${SOLVE_RUNBOOK_FILE}`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ${SOLVE_RUNBOOK_FILE} >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          echo -e "\nOPERATE_STEP=`basename ${VALIDATE_RUNBOOK_FILE}`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ${VALIDATE_RUNBOOK_FILE} >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          else
            log_warn "Solve scenario is enabled but no validate_scenario.sh found. No solution will be tested."
          fi
        else
          log_warn "Solve scenario is enabled but no solve_scenario.sh found. No solution will be tested."
        fi

      fi 

      chmod +x ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi

  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0
}

## [core] Generates `solve.sh` script.  
## Only creates script without executing it or copying it to the Bastion Host.
solve_dry() { 

  ## Name for the file that will contain the runbook for this phase
  RUNBOOK_FILE="solve.sh"

  log "Generate scenario solution file (${RUNBOOK_FILE})"

  log_debug "Check scenario existence..."
  if [ ! -z $1 ]; then
    SCENARIO_FOLDER=$(_locate_scenario $1)

    if _check_scenario $SCENARIO_FOLDER; then 
      ## Scenario found
      log_debug "Found scenario at ${SCENARIO_FOLDER}"

      # Both files need to exist and not to be empty in order for the tool to 
      # add them to the provision runbook file.
      SOLVE_RUNBOOK_FILE="${SCENARIO_FOLDER}/solve_scenario.sh"
      VALIDATE_RUNBOOK_FILE="${SCENARIO_FOLDER}/validate_scenario.sh"

      if [[ -f "${SOLVE_RUNBOOK_FILE}" ]] && [[ -s "${SOLVE_RUNBOOK_FILE}" ]] ;  then

        log_trace "Found ${SOLVE_RUNBOOK_FILE}"

        if [[ -f "${VALIDATE_RUNBOOK_FILE}" ]] && [[ -s "${VALIDATE_RUNBOOK_FILE}" ]] ;  then

          log_trace "Found ${VALIDATE_RUNBOOK_FILE}"

          # | Environment Variables
          # +-----------------------------------------------------------------------
          cat ${SCENARIO_OUTPUT_FOLDER}scenario_env.env > ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          # | Shared functions
          # +-----------------------------------------------------------------------
          echo -e "\nOPERATE_STEP=00_shared_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ./scenarios/00_shared_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          echo -e "\nOPERATE_STEP=01_md_log_functions.env\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ./scenarios/01_md_log_functions.env >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          # | Solve Scenario steps
          # +-----------------------------------------------------------------------          

          echo -e "\nOPERATE_STEP=`basename ${SOLVE_RUNBOOK_FILE}`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ${SOLVE_RUNBOOK_FILE} >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

          echo -e "\nOPERATE_STEP=`basename ${VALIDATE_RUNBOOK_FILE}`\n" >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}
          cat ${VALIDATE_RUNBOOK_FILE} >> ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

        else
          log_warn "No validate_scenario.sh found. No solution will be tested."
          return 1
        fi
      else
        log_warn "No solve_scenario.sh found. No solution will be tested."
        return 1
      fi

      chmod +x ${SCENARIO_OUTPUT_FOLDER}scripts/${RUNBOOK_FILE}

    else
      log_err "Scenario not found. @${FUNCNAME[0]}"
      _print_available_scenarios
      ## Without a scenario to run we exit before doing any damage. 
      return 1
    fi

  else
    log_err "Scenario is empty. Pass a scenario name as argument. @${FUNCNAME[0]}"
    _print_available_scenarios
    ## Without a scenario to run we exit before doing any damage. 
    return 1
  fi

  ## When reaching this line scenario file should be ready.
  return 0

}

## [core] [ops] Runs runbook script on Bastion Host.  
## Runs the scenario step generated previously either on the local node or on a 
## remote node.
## It takes the file name as an argument and, after checking if a file with that
## name exists in the scripts folder, executes it.
execute_scenario_step(){

  # If this is set to true, the function only copies the runbook and does not execute it.
  local _copy_only=false

  ## Check parameters
  while [ $# -gt 0 ]
  do
    case "$1" in
    (-copy) _copy_only=true; shift;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*)  break;;
    esac
  done

  local SCENARIO_STEP=$1
  local SCENARIO_FILE="${SCENARIO_OUTPUT_FOLDER}scripts/${SCENARIO_STEP}.sh"

  ## Check if scenario step file is populated
  if [ -f "${SCENARIO_FILE}" ]; then
    log_trace "Scenario located at ${SCENARIO_FILE}"

    ## Check if is dry_run or not
    if [ "${_DRY_RUN}" == "true" ]; then
     log_warn "Script is in 'dry_run' mode. No command executed."
     exit 0
    else
      if [ "${_RUN_LOCAL}" == "true" ]; then
        log "Running ${SCENARIO_STEP}.sh locally. This means you are on Bastion Host."
        if [ "${_copy_only}" == "false" ]; then
          ${SCENARIO_FILE}
        else
          log_trace "Not running the steps for ${SCENARIO_STEP}.sh since -copy parameter was passed."
        fi
      else
        log "Running ${SCENARIO_STEP}.sh remotely on ${BASTION_HOST}."
        
        ## The use of support scripts makes the scenario step script not portable
        ## When copying the scenario script on a remote host we need also to
        ## upload the support scripts.
        log_debug "Copying support scripts on bastion host"
        provision_scenario_supporting_scripts

        log_debug "Copying runbook file "
        remote_copy "${BASTION_HOST}" "${SCENARIO_FILE}" "~/${SCENARIO_STEP}.sh"
        
        if [ "${_copy_only}" == "false" ]; then
          log_debug "Executing runbook file "
          remote_exec "${BASTION_HOST}" "~/${SCENARIO_STEP}.sh"
        fi
      fi
      # exit 0
    fi
  else
    ## If the scenario file does not exist we exit.
    log_warn "Scenario file for ${SCENARIO_STEP} not found at ${SCENARIO_FILE}"
    log_err "Nothing will be done..."
    return 1
  fi

}

## [core] [ops] Copy supporting scripts to Bastion Host
## Used to upload suporting scripts too when running in remote mode.
provision_scenario_supporting_scripts() {

  # _support_scripts_path="scenarios/99_supporting_scripts/"
  local _support_scripts_path="scenarios/00_base_scenario_files/supporting_scripts/"
  remote_copy "${BASTION_HOST}" "${_support_scripts_path}*" "~/ops/${_support_scripts_path}"
}

